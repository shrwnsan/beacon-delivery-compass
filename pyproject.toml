[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "beaconled"
version = "0.2.1"  # Patch release with bug fixes and improvements
description = "Your delivery compass for empowered product builders. A comprehensive toolkit for analyzing git repository statistics and development metrics."
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "shrwnsan"},
]
maintainers = [
    {name = "shrwnsan"},
]
keywords = ["git", "analytics", "metrics", "development", "productivity"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "click>=8.1.0",
    "gitpython>=3.1.41",
    "rich>=13.0.0",
    "pydantic>=2.7.0",
    "colorama>=0.4.6",
]

[project.urls]
Homepage = "https://github.com/shrwnsan/beacon-delivery-compass"
Documentation = "https://github.com/shrwnsan/beacon-delivery-compass#readme"
Repository = "https://github.com/shrwnsan/beacon-delivery-compass.git"
Issues = "https://github.com/shrwnsan/beacon-delivery-compass/issues"

[project.scripts]
beaconled = "beaconled.cli:main"

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "freezegun>=1.0.0",
    "pytz>=2023.3",

    # Code style and formatting
    "black>=23.0.0",
    "isort>=5.10.0",
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0",
    "flake8-docstrings>=1.6.0",
    "pep8-naming>=0.13.0",

    # Type checking
    "mypy>=1.0.0",
    "types-python-dateutil>=2.8.0",
    "types-pytz>=2023.0.0",
    "types-requests>=2.28.0",

    # Security
    "bandit>=1.7.0",
    "safety>=2.0.0",

    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=1.0.0",

    # Development tools
    "pre-commit>=3.0.0",
    "ipdb>=0.13.0",
    "ipython>=8.0.0"
]

[tool.black]
line-length = 88
target-version = ['py310']  # Updated from py39
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.ruff_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100

[tool.ruff.lint]
# Ignore these rules globally
ignore = [
    "ANN401",  # Allow dynamically typed expressions (Any)
    "COM812",  # Trailing comma prohibited (conflicts with ruff format)
]

# Enable all available rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "T20", # flake8-print
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit (security)
    "B",   # flake8-blind-except
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "TID", # flake8-tidy-imports
    "RUF"  # Ruff-specific rules
]

# Relax rules for source files and scripts
[tool.ruff.lint.per-file-ignores]
# Source files
"src/beaconled/**/*.py" = [
  "ANN101",  # missing type annotation for self in methods
  "ANN102",  # missing type annotation for cls in classmethods
  "ANN201",  # missing return type on functions
  "ANN202",  # missing return type on private methods
  "ANN204",  # __init__ return type
  "PLR0913", # too many arguments
  "PLR2004", # magic numbers
  "S110",    # try/except/pass
  "A003",    # class attribute shadowing builtin
  "ISC001"   # implicit string concatenation
]

# Tests
"tests/**" = [
  # Type checking
  "ANN001",  # missing type annotations for function arguments in tests
  "ANN002",  # *args annotation not needed in tests
  "ANN003",  # **kwargs annotation not needed in tests
  "ANN101",  # missing type annotation for self in test methods
  "ANN201",  # missing return type on test functions
  "ANN202",  # missing return type on private helpers in tests
  "ANN204",  # __init__ return type in tests
  "ANN401",  # allow Any in tests

  # Testing-specific
  "S101",    # allow bare assert in tests
  "E501",    # ignore line-length in tests
  "ISC001",  # implicit string concatenation
  "F841",    # allow assigned-but-unused in tests (e.g., captured stdout)
  "FBT003",  # boolean positional in asserts in tests
  "ERA001",  # allow commented-out code in tests
  "T201",    # allow print in tests for debug

  # Naming conventions
  "N805",    # first arg name in class methods (used by Hypothesis composites)
  "N818",    # exception naming in tests

  # Path handling
  "PTH100",  # os.path.abspath in tests is OK
  "PTH103",  # os.makedirs in tests is OK
  "PTH109",  # os.getcwd in tests is OK
  "PTH110",  # os.path.exists in tests is OK
  "PTH117",  # os.path.isabs in tests is OK
  "PTH118",  # os.path.join in tests is OK
  "PTH121",  # os.path.samefile in tests is OK
  "PTH123",  # open() in tests is OK

  # Code complexity and patterns
  "C901",    # complexity in helper methods
  "PLR2004", # magic numbers are fine in tests

  # Imports and packages
  "I001",    # ignore import sorting in tests
  "INP001",  # implicit namespace package

  # Security (testing exceptions)
  "S311",    # use of random for non-crypto in tests
  "S603"     # subprocess usage in tests
]
"src/beaconled/utils/date_utils.py" = [
  "TRY003", # long messages are fine in this validated module
  "TRY300", # allow return before except
  "TRY301", # allow direct raise instead of inner function
]
"src/beaconled/formatters/json_format.py" = [
  "TRY003", # custom message in TypeError acceptable
]
"src/beaconled/core/models.py" = [
  "TRY003", # data model ValueError messages are acceptable here
]
"src/beaconled/core/analyzer.py" = [
  "C901",     # complex but tested methods
  "PLR0912",  # too many branches in analytics
  "PLR0915",  # too many statements in analytics
  "TRY003",   # long RuntimeError messages for user clarity
]
"src/beaconled/cli.py" = [
  "T201",    # CLI intentionally prints
  "EXE001",  # shebang allowed for CLI entry
  "I001",    # import layout acceptable for readability
  "E501",    # long help/description text
  "COM812",  # trailing commas in argparse style
  "C901",    # CLI main is complex but acceptable
  "PLR0912", # too many branches in CLI
  "PLR0915", # too many statements in CLI
]
"scripts/setup_product_analytics.py" = [
  "T201",    # script intentionally prints instructions
  "EXE001",  # shebang allowed for scripts
  "I001",    # import layout acceptable
  "ANN202",  # private helpers without explicit return annotations
  "ANN201",  # public function annotations optional in scripts
  "ANN204",  # __init__ annotation optional in scripts
  "PTH123",  # using built-in open() is acceptable here
  "PTH101",  # using os.chmod for simplicity
  "S103",    # permissive chmod in a local script
  "E501",    # long embedded script/text blocks
]
"scripts/product_insights_cli.py" = [
  "T201",    # CLI intentionally prints
  "EXE001",  # shebang allowed for CLI entry
  "I001",    # import layout acceptable for readability
  "UP006",   # legacy typing annotations acceptable
  "UP035",   # typing.Dict allowed in script
  "ANN201",  # return type on main optional
  "ANN204",  # __init__ annotation optional in scripts
  "COM812",  # trailing comma suggestions
  "C901",    # complexity acceptable in CLI main
  "PLR0912", # branching acceptable in CLI main
]
"scripts/product_analytics.py" = [
  "T201",    # script prints allowed
  "UP006",   # legacy typing in annotations acceptable
  "UP035",   # typing.Dict import allowed
  "COM812",  # trailing comma suggestions in argparse style
  "I001",    # import layout acceptable
  "PLR2004", # magic numbers acceptable in heuristics
  "PLR0911", # multiple returns acceptable in classifier
  "ANN101",  # missing type annotation for self in methods
  "ANN201",  # missing return type on functions
  "ANN202",  # missing return type on private methods
  "ANN204",  # __init__ return type
  "E402"     # module level import not at top of file
]

# Scripts
"scripts/**/*.py" = [
  # Type annotation rules - allow dynamic types in scripts
  "ANN001",  # Missing type annotation for function arguments
  "ANN002",  # Missing type annotation for *args
  "ANN003",  # Missing type annotation for **kwargs
  "ANN101",  # Missing type annotation for self in method
  "ANN102",  # Missing type annotation for cls in classmethods
  "ANN201",  # Missing return type on functions
  "ANN202",  # Missing return type on private methods
  "ANN204",  # __init__ return type
  "ANN401",  # Allow Any in type annotations for scripts

  # Style and formatting
  "T201",    # Intentional prints in CLIs/scripts
  "E402",    # Module level import not at top of file
  "E501",    # Long lines in scripts
  "I001",    # Import sorting
  "COM812",  # Trailing commas suggestions
  "UP006",   # Legacy typing in annotations
  "UP035",   # typing.* imports acceptable
  "EXE001",  # Shebang issues in scripts

  # Code complexity
  "C901",    # Complexity
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0915", # Too many statements
  "PLR2004", # Magic numbers

  # Security
  "S103",    # chmod mask
  "S603",    # subprocess shell/args in scripts

  # Other
  "TRY003",  # Long exception messages
  "TRY200",  # Use raise from
  "TRY301",  # Abstract raise suggestion
  "PTH123",  # built-in open()
  "RUF005",  # List concat suggestions
  "PLW2901", # Loop var overwritten
  "UP015",   # Unnecessary mode argument
  "B904",    # raise from suggestion
  "INP001"   # Implicit namespace package
]

"run_tests.py" = [
  "T201",   # intentional prints in helper
  "C901",   # complexity
  "PLR0911",# multiple returns
  "PLR0912",# branches
  "ANN201", # return annotations optional
  "COM812", # trailing commas suggestions
  "E501",   # long lines in help/menu
  "FBT003", # boolean positional in helper
  "EXE001", # shebang not executable
  "UP035",  # typing.List import
  "UP006",  # legacy typing alias
  "PTH100", # os.path.abspath
  "PTH118", # os.path.join
  "PTH120", # os.path.dirname
  "PTH109", # os.getcwd
  "PTH119", # os.path.basename
  "PTH123", # open()
  "UP015",  # unnecessary mode arg
  "TRY300", # return outside else
  "FBT001", # bool positional in def
  "FBT002", # bool default positional
]

"run_test.py" = [
  "I001",   # import sort not required
  "ANN201", # return annotation optional
  "T201",   # prints allowed
]

"check_env_imports.py" = [
  "T201",   # prints allowed in env checker
  "EXE001", # shebang not executable
  "I001",   # import sorting not required
  "ANN201", # return type optional
  "ANN001", # missing arg annotation
  "E501",   # long lines
  "COM812", # trailing commas
  "TRY300", # return outside else
  "PTH109", # os.getcwd in helper
]

"check_env.py" = [
  "T201",   # prints allowed
  "ANN201", # return type optional
  "PTH109", # os.getcwd
  "EXE001", # shebang not executable
  "I001",   # import sorting not required
  "ANN001", # arg annotations optional
  "PTH123",  # built-in open() in scripts
  "TRY300", # try/except in exceptions
]
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
  -v                  # Verbose output
  --strict-markers    # Require markers to be registered
  --durations=10      # Show 10 slowest tests
  --durations-min=1.0 # Only show tests slower than 1 second
  --cov=beaconled     # Coverage reporting
  --cov-report=term-missing  # Show missing lines
  --cov-report=xml:coverage.xml  # For code coverage reporting
  -n auto             # Parallel test execution
  --dist=loadscope    # Group tests by module for better parallelization
  --typeguard-packages=beaconled  # Enable type checking in tests
"""
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
    "*Test",
]
python_functions = [
    "test_*",
]
markers = [
    "performance: mark test as a performance test (deselect with '-m \"not performance\"')",
    "integration: integration tests that require external resources",
    "unit: unit tests (default for tests in unit/ directory)",
]

# Configure test coverage reporting
[tool.coverage.run]
source = ["beaconled"]
omit = ["**/__init__.py", "**/tests/**"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90  # Require at least 90% test coverage

# Type checking configuration
[tool.typeguard]
check-variable-types = true
warn-return-any = true
warn-unused-ignores = true

# Performance test configuration
[performance]
# Number of warmup iterations for performance tests
warmup_iterations = 3
# Number of benchmark iterations for performance tests
benchmark_iterations = 10
# Timeout for performance tests in seconds (0 for no timeout)
timeout = 300  # 5 minutes

[tool.mypy]
python_version = "3.10"  # Updated from 3.9
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_calls = true

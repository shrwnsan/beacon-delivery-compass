[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "beaconled"
version = "0.2.0-dev"  # Development version with GitPython migration
description = "Your delivery compass for empowered product builders. A comprehensive toolkit for analyzing git repository statistics and development metrics."
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "shrwnsan"},
]
maintainers = [
    {name = "shrwnsan"},
]
keywords = ["git", "analytics", "metrics", "development", "productivity"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "click>=8.1.0",
    "gitpython>=3.1.41",
    "rich>=13.0.0",
    "pydantic>=2.7.0",
    "colorama>=0.4.6",
]

[project.urls]
Homepage = "https://github.com/shrwnsan/beacon-delivery-compass"
Documentation = "https://github.com/shrwnsan/beacon-delivery-compass#readme"
Repository = "https://github.com/shrwnsan/beacon-delivery-compass.git"
Issues = "https://github.com/shrwnsan/beacon-delivery-compass/issues"

[project.scripts]
beaconled = "beaconled.cli:main"

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "freezegun>=1.0.0",
    "pytz>=2023.3",
    
    # Code style and formatting
    "black>=23.0.0",
    "isort>=5.10.0",
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0",
    "flake8-docstrings>=1.6.0",
    "pep8-naming>=0.13.0",
    
    # Type checking
    "mypy>=1.0.0",
    "types-python-dateutil>=2.8.0",
    "types-pytz>=2023.0.0",
    "types-requests>=2.28.0",
    
    # Security
    "bandit>=1.7.0",
    "safety>=2.0.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=1.0.0",
    
    # Development tools
    "pre-commit>=3.0.0",
    "ipdb>=0.13.0",
    "ipython>=8.0.0"
]

[tool.black]
line-length = 88
target-version = ['py310']  # Updated from py39
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.ruff_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "FBT", # flake8-boolean-trap
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # Ruff-specific rules
    "AIR", # flake8-airflow
    "PERF",# perflint
    "FURB",# flake8-functions
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=beaconled --cov-report=term-missing --durations=10"
testpaths = [
    "tests",
]
markers = [
    "performance: mark test as a performance test (deselect with '-m \"not performance\"')",
]

# Performance test configuration
[performance]
# Number of warmup iterations for performance tests
warmup_iterations = 3
# Number of benchmark iterations for performance tests
benchmark_iterations = 10
# Timeout for performance tests in seconds (0 for no timeout)
timeout = 300  # 5 minutes

[tool.mypy]
python_version = "3.10"  # Updated from 3.9
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
